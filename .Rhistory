hat_mu  <- tilde_mu[j,]
hat_gamma  <- tilde_gamma[j,,]
hat_sigma  <- solve(tilde_gamma[j,,]%*%t(tilde_gamma[j,,]))
hat_mu
hat_gamma
hat_sigma  <- solve(tilde_gamma[j,,]%*%t(tilde_gamma[j,,]))
hat_sigma
for(kk in 1:k){
hat_beta[,kk] <- solve(M[,,kk]+solve(hat_sigma))%*%(c_vec[,kk]-solve(hat_sigma)%*%hat_mu)
}
U
U[[kk]]
chunklength <- sum(unlist(d)+1)
d_boot_index <- sample(1:chunklength, chunklength, replace=TRUE)
V
V <- as.matrix(Matrix::bdiag(S))
V
# Bootstrap
bet_boot_k <- rep(0,dim+1)
Var_bet_boot <- array(0, c(dim+1,dim+1))
bet_boot_k <- rep(0, p+1)
#bet_boot_rootn_k <- rep(0,dim+1)
bet_boot_exact_k <- rep(0, p+1)
bet_boot_k <- rep(0, p+1)
#bet_boot_rootn_k <- rep(0,dim+1)
bet_boot_exact_k <- rep(0, p+1)
Var_bet_boot <- array(0, c(p+1,p+1))
#Var_bet_rootn_boot <- array(0, c(dim+1,dim+1))
Var_bet_exact_boot <- array(0, c(p+1,p+1))
Z_prime  <- expm::sqrtm(solve(V))%*%Z
Z_prime
x_mc[[kk]] <- MASS::mvrnorm(n=num_mc_int, mu=mu_x_list[[kk]], sigma2_x_list[[kk]])
num_mc_int <- 50000
x_mc[[kk]] <- MASS::mvrnorm(n=num_mc_int, mu=mu_x_list[[kk]], sigma2_x_list[[kk]])
E<- list(0); E_exact <- list(0)
S_exact <- list(0)
x_mc <- list(0), y_mc <- list(0); num_mc_int <- 50000
S_exact <- list(0)
x_mc <- list(0); y_mc <- list(0); num_mc_int <- 50000
Z <- unlist(theta)
for (kk in 1:k) {
ext_full <- cbind(1,x_full_ext[,,kk])
ext_red <- cbind(1,x_red_ext[, 1:d[[kk]], kk])
x_mc[[kk]] <- MASS::mvrnorm(n=num_mc_int, mu=mu_x_list[[kk]], sigma2_x_list[[kk]])
y_mc[[kk]] <- x_mc[[kk]]%*%true_bet + sqrt(sigma2_y)*rt(n=num_mc_int, df= df_y)
x_mc_red[[kk]] <- x_mc[[kk]][,A[[kk]]]
reg_mc <- lm(y_mc[[kk]]~x_mc_red[[kk]])
S_exact[[kk]] <- vcov(reg_mc)
M[,,kk]  <- (8*w/N^2)*t(ext_full)%*%ext_red %*%solve(S[[kk]])%*%t(ext_red)%*%ext_full
c_vec[,kk] <- (8*w/N^2)*t(ext_full)%*%ext_red%*%solve(S[[kk]])%*%t(ext_red)%*%ext_red%*%theta[[kk]]
E[[kk]] <- (1/N)*t(ext_full)%*%ext_full
sigma2_x_intercept <- rbind(0,cbind(0, sigma2_x_list[[kk]]))
E_exact[[kk]] <- sigma2_x_intercept + c(1,mu_x_list[[kk]])%*%t(c(1,mu_x_list[[kk]]))
U[[kk]] <- solve(t(ext_red)%*%ext_red)%*%t(ext_red)%*%ext_full
}
bet
bet[kk,]
x_mc[[kk]] <- MASS::mvrnorm(n=num_mc_int, mu=mu_x_list[[kk]], sigma2_x_list[[kk]])
y_mc[[kk]] <- x_mc[[kk]]%*%bet[kk,] + sqrt(sigma2_y)*rt(n=num_mc_int, df= df_y)
for (kk in 1:k) {
ext_full <- cbind(1,x_full_ext[,,kk])
ext_red <- cbind(1,x_red_ext[, 1:d[[kk]], kk])
x_mc[[kk]] <- MASS::mvrnorm(n=num_mc_int, mu=mu_x_list[[kk]], sigma2_x_list[[kk]])
y_mc[[kk]] <- x_mc[[kk]]%*%bet[kk,] + sqrt(3)*rt(n=num_mc_int, df= df_y)
x_mc_red[[kk]] <- x_mc[[kk]][,A[[kk]]]
reg_mc <- lm(y_mc[[kk]]~x_mc_red[[kk]])
S_exact[[kk]] <- vcov(reg_mc)
M[,,kk]  <- (8*w/N^2)*t(ext_full)%*%ext_red %*%solve(S[[kk]])%*%t(ext_red)%*%ext_full
c_vec[,kk] <- (8*w/N^2)*t(ext_full)%*%ext_red%*%solve(S[[kk]])%*%t(ext_red)%*%ext_red%*%theta[[kk]]
E[[kk]] <- (1/N)*t(ext_full)%*%ext_full
sigma2_x_intercept <- rbind(0,cbind(0, sigma2_x_list[[kk]]))
E_exact[[kk]] <- sigma2_x_intercept + c(1,mu_x_list[[kk]])%*%t(c(1,mu_x_list[[kk]]))
U[[kk]] <- solve(t(ext_red)%*%ext_red)%*%t(ext_red)%*%ext_full
}
df_y <- 4.1
Z <- unlist(theta)
for (kk in 1:k) {
ext_full <- cbind(1,x_full_ext[,,kk])
ext_red <- cbind(1,x_red_ext[, 1:d[[kk]], kk])
x_mc[[kk]] <- MASS::mvrnorm(n=num_mc_int, mu=mu_x_list[[kk]], sigma2_x_list[[kk]])
y_mc[[kk]] <- x_mc[[kk]]%*%bet[kk,] + sqrt(3)*rt(n=num_mc_int, df= df_y)
x_mc_red[[kk]] <- x_mc[[kk]][,A[[kk]]]
reg_mc <- lm(y_mc[[kk]]~x_mc_red[[kk]])
S_exact[[kk]] <- vcov(reg_mc)
M[,,kk]  <- (8*w/N^2)*t(ext_full)%*%ext_red %*%solve(S[[kk]])%*%t(ext_red)%*%ext_full
c_vec[,kk] <- (8*w/N^2)*t(ext_full)%*%ext_red%*%solve(S[[kk]])%*%t(ext_red)%*%ext_red%*%theta[[kk]]
E[[kk]] <- (1/N)*t(ext_full)%*%ext_full
sigma2_x_intercept <- rbind(0,cbind(0, sigma2_x_list[[kk]]))
E_exact[[kk]] <- sigma2_x_intercept + c(1,mu_x_list[[kk]])%*%t(c(1,mu_x_list[[kk]]))
U[[kk]] <- solve(t(ext_red)%*%ext_red)%*%t(ext_red)%*%ext_full
}
x_mc <- list(0); x_mc_red <- list(0); y_mc <- list(0); num_mc_int <- 50000
df_y <- 4.1
Z <- unlist(theta)
for (kk in 1:k) {
ext_full <- cbind(1,x_full_ext[,,kk])
ext_red <- cbind(1,x_red_ext[, 1:d[[kk]], kk])
x_mc[[kk]] <- MASS::mvrnorm(n=num_mc_int, mu=mu_x_list[[kk]], sigma2_x_list[[kk]])
y_mc[[kk]] <- x_mc[[kk]]%*%bet[kk,] + sqrt(3)*rt(n=num_mc_int, df= df_y)
x_mc_red[[kk]] <- x_mc[[kk]][,A[[kk]]]
reg_mc <- lm(y_mc[[kk]]~x_mc_red[[kk]])
S_exact[[kk]] <- vcov(reg_mc)
M[,,kk]  <- (8*w/N^2)*t(ext_full)%*%ext_red %*%solve(S[[kk]])%*%t(ext_red)%*%ext_full
c_vec[,kk] <- (8*w/N^2)*t(ext_full)%*%ext_red%*%solve(S[[kk]])%*%t(ext_red)%*%ext_red%*%theta[[kk]]
E[[kk]] <- (1/N)*t(ext_full)%*%ext_full
sigma2_x_intercept <- rbind(0,cbind(0, sigma2_x_list[[kk]]))
E_exact[[kk]] <- sigma2_x_intercept + c(1,mu_x_list[[kk]])%*%t(c(1,mu_x_list[[kk]]))
U[[kk]] <- solve(t(ext_red)%*%ext_red)%*%t(ext_red)%*%ext_full
}
S_exact[[kk]]
S[[kk]]
S_exact
S
x_mc_red[[kk]]
y_mc[[kk]]
k <- 20
N <- 3000
p <- 8
r1 <- 0.3
mu <- c(3, 1, -1, -3, 3, 1, -1, -3)
c1 <- 0.3
diag_sigma <- 5
sigma <- matrix(0, p, p)
for (i in 1:p) {
for (j in 1:p) {
sigma[i, j] <- c1*diag_sigma
}
}
diag(sigma) <- diag_sigma
#Study group:	mu_x_list[[kk]]
#1~3	first covariate -4
#4~6	second covariate -4
#7~9	third covariate +4
#10~12	fourth covariate +4
#13~15	fifth covariate -4
#16~18	sixth covariate -4
#19	seventh covariate +4
#20 eighth covariate +4
#diagonal for sigma_x_list[[kk]]
#1–5	3
#6–10	4
#11–15	5
#16–20	6
mu_x_list <- list()
sigma2_x_list <- list()
for (kk in 1:k) {
base_mu <- rep(2, p)  # default
if (kk %in% c(1, 2, 3)) {
base_mu[1:4] <- -2
} else if (kk %in% c(4, 5, 6)) {
base_mu[5:8] <- -2
} else if (kk %in% c(7, 8, 9)) {
base_mu[c(1, 2, 7, 8)] <- -2
} else if (kk %in% c(10, 11, 12)) {
base_mu[c(3, 4, 5, 6)] <- -2
} else if (kk %in% c(13, 14, 15, 16)) {
base_mu[c(1, 2, 3, 4)] <- -2
} else if (kk %in% c(17, 18, 19, 20)) {
base_mu[c(5, 6, 7, 8)] <- -2
}
mu_x_list[[kk]] <- base_mu
if (kk >= 1 && kk <= 5) {
diag_val <- 1
} else if (kk >= 6 && kk <= 10) {
diag_val <- 1
} else if (kk >= 11 && kk <= 15) {
diag_val <- 1
} else if (kk >= 16 && kk <= 20) {
diag_val <- 1
}
base_sigma <- matrix(r1 * diag_val, p, p)
diag(base_sigma) <- diag_val
sigma2_x_list[[kk]] <- base_sigma
}
num_study <- c(rep(500, k/4), rep(1000, k/4), rep(1500, k/4), rep(2000, k/4))
bet <- MASS::mvrnorm(n = k, mu = mu, Sigma = sigma)
A <- list(
c(1,2), c(3,4), c(5,6), c(7,8),
c(1,2,7,8), c(3,4,5,6),
c(1,2), c(3,4), c(5,6), c(7,8),
c(1,2,7,8), c(3,4,5,6),
c(1,2), c(3,4), c(5,6), c(7,8),
c(1,2,7,8), c(3,4,5,6),
c(1,2), c(3,4)
)
d <- list()
theta <- list()
S <- list()
x_full <- list()
x_red <- list()
x_full_ext <- array(0, c(N, p, k))
x_red_ext  <- array(0, c(N, p, k))
y <- list()
y_ext <- array(0, c(N, k))
for (kk in 1:k) {
set.seed(1234 + kk)
d[[kk]] <- length(A[[kk]])
# study-specific covariate distribution
x_full[[kk]] <- MASS::mvrnorm(num_study[kk], mu = mu_x_list[[kk]], Sigma = sigma2_x_list[[kk]])
y[[kk]] <- x_full[[kk]] %*% bet[kk, ] + sqrt(3)*rt(n=num_study[kk], df = 4.1)
x_red[[kk]] <- x_full[[kk]][, A[[kk]], drop = FALSE]
reg <- lm(y[[kk]] ~ x_red[[kk]])
theta[[kk]] <- coef(reg)
S[[kk]] <- vcov(reg)
}
for (kk in 1:k) {
set.seed(5678 + kk)
x_full_ext[,,kk] <- MASS::mvrnorm(N, mu = mu_x_list[[kk]], Sigma = sigma2_x_list[[kk]])
x_red_ext[, 1:d[[kk]], kk] <- x_full_ext[, A[[kk]], kk]
}
Niter <- 200
rho_fallback <- 1e-30
kap <- 30
d_alpha <- 0.5
step_size <- 0.1
step_fallback <- 1e-40
tolerance <- 1e-8
num_gd <- 1
# Initial containers
hat_mu <- rep(0, p+1)
hat_sigma <- array(0, c(p+1, p+1))
hat_beta <- array(0, c(p+1, k))
tilde_mu <- array(0, c(Niter, p+1))
tilde_gamma <- array(0, c(Niter, p+1, p+1))
rho <- array(0, c(Niter, p+1))
M <- array(0, c(p+1, p+1, k))
c_vec <- array(0, c(p+1, k))
U <- list(0); U_exact <- list(0)
E<- list(0); E_exact <- list(0)
S_exact <- list(0)
x_mc <- list(0); x_mc_red <- list(0); y_mc <- list(0); num_mc_int <- 50000
df_y <- 4.1
Z <- unlist(theta)
for (kk in 1:k) {
ext_full <- cbind(1,x_full_ext[,,kk])
ext_red <- cbind(1,x_red_ext[, 1:d[[kk]], kk])
x_mc[[kk]] <- MASS::mvrnorm(n=num_mc_int, mu=mu_x_list[[kk]], sigma2_x_list[[kk]])
y_mc[[kk]] <- x_mc[[kk]]%*%bet[kk,] + sqrt(3)*rt(n=num_mc_int, df= df_y)
x_mc_red[[kk]] <- x_mc[[kk]][,A[[kk]]]
reg_mc <- lm(y_mc[[kk]]~x_mc_red[[kk]])
S_exact[[kk]] <- vcov(reg_mc)
S
M[,,kk]  <- (8*w/N^2)*t(ext_full)%*%ext_red %*%solve(S[[kk]])%*%t(ext_red)%*%ext_full
c_vec[,kk] <- (8*w/N^2)*t(ext_full)%*%ext_red%*%solve(S[[kk]])%*%t(ext_red)%*%ext_red%*%theta[[kk]]
E[[kk]] <- (1/N)*t(ext_full)%*%ext_full
sigma2_x_intercept <- rbind(0,cbind(0, sigma2_x_list[[kk]]))
E_exact[[kk]] <- sigma2_x_intercept + c(1,mu_x_list[[kk]])%*%t(c(1,mu_x_list[[kk]]))
U[[kk]] <- solve(t(ext_red)%*%ext_red)%*%t(ext_red)%*%ext_full
}
S_exact[[kk]]
S[[kk]]
mu_x_list <- list()
sigma2_x_list <- list()
for (kk in 1:k) {
base_mu <- rep(2, p)  # default
if (kk %in% c(1, 2, 3)) {
base_mu[1:4] <- -2
} else if (kk %in% c(4, 5, 6)) {
base_mu[5:8] <- -2
} else if (kk %in% c(7, 8, 9)) {
base_mu[c(1, 2, 7, 8)] <- -2
} else if (kk %in% c(10, 11, 12)) {
base_mu[c(3, 4, 5, 6)] <- -2
} else if (kk %in% c(13, 14, 15, 16)) {
base_mu[c(1, 2, 3, 4)] <- -2
} else if (kk %in% c(17, 18, 19, 20)) {
base_mu[c(5, 6, 7, 8)] <- -2
}
mu_x_list[[kk]] <- base_mu
if (kk >= 1 && kk <= 5) {
diag_val <- 1
} else if (kk >= 6 && kk <= 10) {
diag_val <- 1
} else if (kk >= 11 && kk <= 15) {
diag_val <- 1
} else if (kk >= 16 && kk <= 20) {
diag_val <- 1
}
base_sigma <- matrix(r1 * diag_val, p, p)
diag(base_sigma) <- diag_val
sigma2_x_list[[kk]] <- base_sigma
}
num_study <- c(rep(500, k/4), rep(1000, k/4), rep(1500, k/4), rep(2000, k/4))
bet <- MASS::mvrnorm(n = k, mu = mu, Sigma = sigma)
A <- list(
c(1,2), c(3,4), c(5,6), c(7,8),
c(1,2,7,8), c(3,4,5,6),
c(1,2), c(3,4), c(5,6), c(7,8),
c(1,2,7,8), c(3,4,5,6),
c(1,2), c(3,4), c(5,6), c(7,8),
c(1,2,7,8), c(3,4,5,6),
c(1,2), c(3,4)
)
d <- list()
theta <- list()
S <- list()
x_full <- list()
x_red <- list()
x_full_ext <- array(0, c(N, p, k))
x_red_ext  <- array(0, c(N, p, k))
y <- list()
y_ext <- array(0, c(N, k))
for (kk in 1:k) {
set.seed(1234 + kk)
d[[kk]] <- length(A[[kk]])
# study-specific covariate distribution
x_full[[kk]] <- MASS::mvrnorm(num_study[kk], mu = mu_x_list[[kk]], Sigma = sigma2_x_list[[kk]])
y[[kk]] <- x_full[[kk]] %*% bet[kk, ] + sqrt(3)*rt(n=num_study[kk], df = 4.1)
x_red[[kk]] <- x_full[[kk]][, A[[kk]], drop = FALSE]
reg <- lm(y[[kk]] ~ x_red[[kk]])
theta[[kk]] <- coef(reg)
S[[kk]] <- vcov(reg)
}
for (kk in 1:k) {
set.seed(5678 + kk)
x_full_ext[,,kk] <- MASS::mvrnorm(N, mu = mu_x_list[[kk]], Sigma = sigma2_x_list[[kk]])
x_red_ext[, 1:d[[kk]], kk] <- x_full_ext[, A[[kk]], kk]
}
Niter <- 200
rho_fallback <- 1e-30
kap <- 30
d_alpha <- 0.5
step_size <- 0.1
step_fallback <- 1e-40
tolerance <- 1e-8
num_gd <- 1
# Initial containers
hat_mu <- rep(0, p+1)
hat_sigma <- array(0, c(p+1, p+1))
hat_beta <- array(0, c(p+1, k))
tilde_mu <- array(0, c(Niter, p+1))
tilde_gamma <- array(0, c(Niter, p+1, p+1))
rho <- array(0, c(Niter, p+1))
M <- array(0, c(p+1, p+1, k))
c_vec <- array(0, c(p+1, k))
U <- list(0); U_exact <- list(0)
E<- list(0); E_exact <- list(0)
S_exact <- list(0)
x_mc <- list(0); x_mc_red <- list(0); y_mc <- list(0); num_mc_int <- 50000
df_y <- 4.1
Z <- unlist(theta)
for (kk in 1:k) {
ext_full <- cbind(1,x_full_ext[,,kk])
ext_red <- cbind(1,x_red_ext[, 1:d[[kk]], kk])
x_mc[[kk]] <- MASS::mvrnorm(n=num_mc_int, mu=mu_x_list[[kk]], sigma2_x_list[[kk]])
y_mc[[kk]] <- x_mc[[kk]]%*%bet[kk,] + sqrt(3)*rt(n=num_mc_int, df= df_y)
x_mc_red[[kk]] <- x_mc[[kk]][,A[[kk]]]
reg_mc <- lm(y_mc[[kk]]~x_mc_red[[kk]])
S_exact[[kk]] <- vcov(reg_mc)
M[,,kk]  <- (8*w/N^2)*t(ext_full)%*%ext_red %*%solve(S[[kk]])%*%t(ext_red)%*%ext_full
c_vec[,kk] <- (8*w/N^2)*t(ext_full)%*%ext_red%*%solve(S[[kk]])%*%t(ext_red)%*%ext_red%*%theta[[kk]]
E[[kk]] <- (1/N)*t(ext_full)%*%ext_full
sigma2_x_intercept <- rbind(0,cbind(0, sigma2_x_list[[kk]]))
E_exact[[kk]] <- sigma2_x_intercept + c(1,mu_x_list[[kk]])%*%t(c(1,mu_x_list[[kk]]))
U[[kk]] <- solve(t(ext_red)%*%ext_red)%*%t(ext_red)%*%ext_full
}
S_exact[[kk]]
S[[kk]]
df_y <- 4.1
Z <- unlist(theta)
for (kk in 1:k) {
ext_full <- cbind(1,x_full_ext[,,kk])
ext_red <- cbind(1,x_red_ext[, 1:d[[kk]], kk])
x_mc[[kk]] <- MASS::mvrnorm(n=num_mc_int, mu=mu_x_list[[kk]], sigma2_x_list[[kk]])
y_mc[[kk]] <- x_mc[[kk]]%*%bet[kk,] + sqrt(3)*rt(n=num_mc_int, df= df_y)
x_mc_red[[kk]] <- x_mc[[kk]][,A[[kk]]]
reg_mc <- lm(y_mc[[kk]]~x_mc_red[[kk]])
S_exact[[kk]] <- vcov(reg_mc)
M[,,kk]  <- (8*w/N^2)*t(ext_full)%*%ext_red %*%solve(S[[kk]])%*%t(ext_red)%*%ext_full
c_vec[,kk] <- (8*w/N^2)*t(ext_full)%*%ext_red%*%solve(S[[kk]])%*%t(ext_red)%*%ext_red%*%theta[[kk]]
E[[kk]] <- (1/N)*t(ext_full)%*%ext_full
sigma2_x_intercept <- rbind(0,cbind(0, sigma2_x_list[[kk]]))
E_exact[[kk]] <- sigma2_x_intercept + c(1,mu_x_list[[kk]])%*%t(c(1,mu_x_list[[kk]]))
U[[kk]] <- solve(t(ext_red)%*%ext_red)%*%t(ext_red)%*%ext_full
}
# Initialize
tilde_mu[1,] <- rep(0, p+1)
tilde_gamma[1,,] <- diag(rep(1, p+1))
rho[1,] <- rep(rho_fallback, p+1)
j <- 1
while (j < Niter) {
log_T_func <- function(mu_vec, gam){
temp <- 0
for(kk in 1:k){
inv_M_gam <- solve(M[,,kk] + gam %*% t(gam))
temp <- temp + (1/2)*t(c_vec[,kk] + gam%*%t(gam)%*%mu_vec)%*%inv_M_gam%*%(c_vec[,kk]+ gam%*%t(gam)%*%mu_vec)
temp <- temp + (1/2)*log(det(gam%*%t(gam))) - (1/2)*log(det(M[,,kk]+gam%*%t(gam))) - (1/2)*t(mu_vec)%*%gam%*%t(gam)%*%mu_vec
temp <- temp - (1/2)*(8*(w)/N^2)*t(theta[[kk]])%*%t(cbind(1,x_red_ext[,1:d[[kk]],kk]))%*%cbind(1,x_red_ext[,1:d[[kk]],kk])%*%solve(S[[kk]])%*%t(cbind(1,x_red_ext[,1:d[[kk]],kk]))%*%cbind(1,x_red_ext[,1:d[[kk]],kk])%*%theta[[kk]]
}
return(temp)
}
lag_func <- function(mu_vec, vech_gam, rho_cand) {
gam <- matrix(0, nrow=p+1, ncol=p+1)
gam[lower.tri(gam, diag=TRUE)] <- vech_gam
#gam <- matrix(vec_gam, ncol=p+1)
temp <- 0
#for (pp in 1:p) {
for (pp in 1:(p+1)) {
temp <- temp + rho_cand[pp]*(1/kap)*log(1 + exp(kap * gam[pp, pp]))
}
return(-(log_T_func(mu_vec, gam) + temp))
}
temp_mu_1 <- array(0, c(p+1,p+1))
temp_mu_2 <- rep(0, p+1)
#temp_mu_1 <- array(0, c(p,p))
#temp_mu_2 <- rep(0, p)
for (kk in 1:k) {
gam <- tilde_gamma[j,,]
#gam <- t(chol(solve(sigma)))
inv_M_gam <- solve(M[,,kk] + gam %*% t(gam))
temp_mu_1 <- temp_mu_1 + gam%*%t(gam) - gam%*%t(gam)%*% inv_M_gam %*% gam%*%t(gam)
temp_mu_2 <- temp_mu_2 + gam%*%t(gam)%*% inv_M_gam %*% c_vec[,kk]
}
tilde_mu[j+1,] <- solve(temp_mu_1) %*% temp_mu_2
vec_gradient <- function(vech_gam, rho_cand) {
gam <- matrix(0, ncol=p+1, nrow=p+1)
gam[lower.tri(gam, diag=TRUE)] <- vech_gam
temp_sum_1 <- rep(0, (p+1)^2)
temp_sum_softplus <- rep(0, (p+1)*(p+2)/2)
p_iden <- diag(1, (p+1))
p2_iden <- diag(1, (p+1)^2)
K_com <- matrixcalc::commutation.matrix((p+1), (p+1))
for (kk in 1:k) {
inv_M_gam <- solve(M[,,kk] + gam %*% t(gam))
temp_sum_1 <- temp_sum_1 + as.vector(solve(gam%*%t(gam))) - as.vector(inv_M_gam) - kronecker(tilde_mu[j+1,], tilde_mu[j+1,])
temp_sum_1 <- temp_sum_1 + as.vector(kronecker(tilde_mu[j+1,], inv_M_gam %*% (c_vec[,kk] + gam%*%t(gam)%*%tilde_mu[j+1,])))
temp_sum_1 <- temp_sum_1 + as.vector(kronecker(inv_M_gam %*% (c_vec[,kk] + gam%*%t(gam)%*%tilde_mu[j+1,]), tilde_mu[j+1,]))
temp_sum_1 <- temp_sum_1 - as.vector(kronecker(inv_M_gam %*% (c_vec[,kk] + gam%*%t(gam)%*%tilde_mu[j+1,]), inv_M_gam %*% (c_vec[,kk] + gam%*%t(gam)%*%tilde_mu[j+1,])))
}
diag_idx <- cumsum(1:(p+1))
for (pp in 1:(p+1)) {
temp_sum_softplus[diag_idx[pp]] <- rho_cand[pp] * exp(kap * gam[pp, pp]) / (1 + exp(kap * gam[pp, pp]))
}
grad_value <- -0.5*elimination.matrix(p+1)%*% kronecker(p_iden, gam)%*%(p2_iden+K_com)%*%temp_sum_1 - temp_sum_softplus
return(grad_value)
}
z_new <- vech(tilde_gamma[j,,])
for (ss in 1:num_gd) {
z_old <- z_new
t_k <- step_size
optimize_step <- function(z_old, rho_cand, step_size) {
while (TRUE) {
grad <- vec_gradient(z_old, rho_cand)
# if (any(is.nan(grad)) || sqrt(sum(grad^2)) < 1e-8) {
#    return(list(z_new = z_old, step_size = step_size))
#  }
z_new <- z_old - step_size * grad
#temp_gamma <- matrix(z_new, ncol = p)
#frobenius_norm <- sqrt(sum(temp_gamma^2))
#max_diag <- max(abs(diag(temp_gamma)))
#frobenius_threshold <- 1e3
#diag_threshold <- 50
#if (is.nan(frobenius_norm) || is.infinite(frobenius_norm) ||
#    frobenius_norm > frobenius_threshold || max_diag > diag_threshold){
#  step_size <- step_size * d_alpha
#  next
#}
lhs <- lag_func(tilde_mu[j+1,], z_new, rho_cand)
rhs <- lag_func(tilde_mu[j+1,], z_old, rho_cand) - d_alpha * step_size * sum(grad^2)
if (!isTRUE(lhs <= rhs)) {
step_size <- step_size * d_alpha
if (step_size < step_fallback) {
return(list(z_new = z_old, step_size = step_fallback))
}
next
}
break
}
return(list(z_new = z_new, step_size = step_size))
}
grad_update <- optimize_step(z_old, rho[j,], t_k)
z_new <- grad_update$z_new
}
optimize_rho <- function(rho_cand, tilde_mu, z_new) {
rho_find_func <- function(rho_cand) {
return(-lag_func(tilde_mu[j + 1, ], z_new, rho_cand))
}
rho_optim <- tryCatch({
optim(par = rep(rho_fallback, p+1), fn = rho_find_func,
lower = rep(rho_fallback, p+1), upper = rep(1, p+1),
method = "L-BFGS-B")
}, error = function(e) {
return(list(par = rep(rho_fallback, p+1)))
})
return(rho_optim$par)
}
rho[j+1, ] <- optimize_rho(rho[j,], tilde_mu, z_new)
tilde_gamma[j+1,,][lower.tri(tilde_gamma[j+1,,], diag=TRUE)] <- z_new
diff_mu <- sum((tilde_mu[j+1,] - tilde_mu[j,])^2)
diff_gamma <- sum(vech(tilde_gamma[j+1,,] - tilde_gamma[j,,])^2)
diff <- diff_mu + diff_gamma
if (diff < tolerance) break
j <- j + 1
}
hat_mu  <- tilde_mu[j,]
hat_gamma  <- tilde_gamma[j,,]
hat_sigma  <- solve(tilde_gamma[j,,]%*%t(tilde_gamma[j,,]))
for(kk in 1:k){
hat_beta[,kk] <- solve(M[,,kk]+solve(hat_sigma))%*%(c_vec[,kk]-solve(hat_sigma)%*%hat_mu)
}
V <- as.matrix(Matrix::bdiag(S))
U_stack <- do.call(U, rbind)
U_stack <- do.call(rbind, U)
U_stack
solve(E[c(1,A[[kk]]+1),c(1,A[[kk]]+1), kk ] )%*% (E[c(1,A[[kk]]+1),,kk] )
E<- array(0, c(p+1,p+1,k)); E_exact <- E
E_exact[,,kk]  <- sigma2_x_intercept + c(1,mu_x_list[[kk]])%*%t(c(1,mu_x_list[[kk]]))
E_exact[,,kk]
E[,,kk] <- (1/N)*t(ext_full)%*%ext_full
E_exact[,,kk]  <- sigma2_x_intercept + c(1,mu_x_list[[kk]])%*%t(c(1,mu_x_list[[kk]]))
U[[kk]] <- solve(E[c(1,A[[kk]]+1),c(1,A[[kk]]+1), kk ] )%*% (E[c(1,A[[kk]]+1),,kk] )
U[[kk]]
